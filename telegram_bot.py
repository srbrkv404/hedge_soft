import os
import asyncio
import signal
import sys
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv
from hyperliquid_client import HyperliquidClient

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ALLOWED_USER_ID = int(os.getenv("TELEGRAM_ALLOWED_USERS", "0"))

client = None
monitoring_task = None

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ALLOWED_USER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return
    
    welcome_text = """
ü§ñ Ekubo-Hyperliquid Trading Bot

–ö–æ–º–∞–Ω–¥—ã:
/set_deviation <—á–∏—Å–ª–æ> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–≤ ETH –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
/set_timeout <—Å–µ–∫—É–Ω–¥—ã> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
/start_monitoring - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ—Ñ—Ç
/stop_monitoring - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ñ—Ç
/status - –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """
    await update.message.reply_text(welcome_text)


async def set_deviation_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ALLOWED_USER_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    global client
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: /set_deviation 0.002")
        return
    
    try:
        deviation = float(context.args[0])
        if deviation <= 0:
            await update.message.reply_text("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0")
            return
        
        if client is None:
            await update.message.reply_text("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            client = HyperliquidClient()
        
        client.set_deviation(deviation)
        await update.message.reply_text(f"‚úÖ Deviation —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {deviation}")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")


async def set_timeout_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ALLOWED_USER_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    global client
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ: /set_timeout 60")
        return
    
    try:
        timeout = int(context.args[0])
        if timeout < 10:
            await update.message.reply_text("‚ùå –¢–∞–π–º–∞—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 10 —Å–µ–∫—É–Ω–¥")
            return
        
        if client is None:
            await update.message.reply_text("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            client = HyperliquidClient()
        
        client.set_timeout(timeout)
        await update.message.reply_text(f"‚úÖ Timeout —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timeout} —Å–µ–∫")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ALLOWED_USER_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    global client, monitoring_task
    
    if client is None:
        await update.message.reply_text("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    is_running = monitoring_task is not None and not monitoring_task.done()
    
    ekubo_success, ekubo_data = client.get_ekubo_positions()
    fees_success, fees_data = client.get_ekubo_fees()
    
    if ekubo_success:
        eth_in_pool = ekubo_data[0]
        usdc_in_pool = ekubo_data[1]
        ekubo_status = f"ETH: {eth_in_pool}, USDC: {usdc_in_pool}"
    else:
        ekubo_status = f"‚ùå –û—à–∏–±–∫–∞: {ekubo_data}"
    
    if fees_success:
        fee_eth_in_pool = fees_data[0]
        fee_usdc_in_pool = fees_data[1]
        fees_status = f"ETH: {fee_eth_in_pool:.6f}, USDC: {fee_usdc_in_pool:.6f}"
    else:
        fees_status = f"‚ùå –û—à–∏–±–∫–∞: {fees_data}"

    try:
        hl_position = client.get_hl_positions()
        if hl_position:
            short_size = float(hl_position['szi'])
            short_entry = float(hl_position['entryPx'])
            hl_status = f"SHORT {short_size:.6f} ETH @ ${short_entry:.2f}"
        else:
            hl_status = "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π"
    except:
        hl_status = "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π"
    
    status_text = f"""
üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:

üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {'üü¢ –ó–∞–ø—É—â–µ–Ω' if is_running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
  Deviation: {client.get_deviation()}
  Timeout: {client.get_timeout()} —Å–µ–∫
  
üí∞ –¶–µ–Ω–∞ ETH: ${client.get_eth_price():.2f}

üèä Ekubo –ø—É–ª: {ekubo_status}
üè¶ Hyperliquid: {hl_status}
üí∞ Ekubo fees: {fees_status}
    """
    
    await update.message.reply_text(status_text)

async def start_monitoring_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start_monitoring"""
    if update.effective_user.id != ALLOWED_USER_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    global client, monitoring_task
    
    if monitoring_task is not None and not monitoring_task.done():
        await update.message.reply_text("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    if client is None:
        await update.message.reply_text("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        client = HyperliquidClient()
    
    client.start_control_loop()
    
    client.telegram_chat_id = update.effective_chat.id
    client.telegram_bot = context.bot
    
    await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–∫–∞ –ï–≥–æ—Ä–∞...")
    
    monitoring_task = asyncio.create_task(run_monitoring_loop(client))
    
    await update.message.reply_text("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–∫–∞ –ï–≥–æ—Ä–∞ –∑–∞–ø—É—â–µ–Ω!")


async def stop_monitoring_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ALLOWED_USER_ID:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    global client, monitoring_task
    
    if monitoring_task is None or monitoring_task.done():
        await update.message.reply_text("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    client.stop_control_loop()
    await update.message.reply_text("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–∫–∞ –ï–≥–æ—Ä–∞...")
    
    await monitoring_task
    monitoring_task = None
    
    await update.message.reply_text("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–∫–∞ –ï–≥–æ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def run_monitoring_loop(client: HyperliquidClient):
    try:
        while client.control_loop_flag:
            try:
                success, action = client.check_to_change_position()
                
                message = f"‚è∞ {asyncio.get_event_loop().time()}\n"
                
                if success:
                    message += f"üîÑ –î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
                    
                    if action == "place_min_short":
                        result_success, result = client.place_min_short()
                        message += f"   place_min_short: {'‚úÖ' if result_success else '‚ùå'}\n"
                    elif action == "place_max_short":
                        result_success, result = client.place_max_short()
                        message += f"   place_max_short: {'‚úÖ' if result_success else '‚ùå'}\n"
                    elif action == "decrease":
                        result_success, result = client.decrease_short()
                        message += f"   –£–º–µ–Ω—å—à–µ–Ω —à–æ—Ä—Ç: {'‚úÖ' if result_success else '‚ùå'}\n"
                    elif action == "increase":
                        result_success, result = client.increase_short()
                        message += f"   –£–≤–µ–ª–∏—á–µ–Ω —à–æ—Ä—Ç: {'‚úÖ' if result_success else '‚ùå'}\n"
                    
                    if result_success and isinstance(result, dict):
                        filled = result.get('response', {}).get('data', {}).get('statuses', [{}])[0].get('filled')
                        if filled:
                            message += f"   –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {filled.get('totalSz')} ETH @ ${filled.get('avgPx')}"
                else:
                    message += f"‚úÖ {action}"
                
                if hasattr(client, 'telegram_bot') and client.telegram_bot:
                    await client.telegram_bot.send_message(
                        chat_id=client.telegram_chat_id,
                        text=message
                    )
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}"
                if hasattr(client, 'telegram_bot') and client.telegram_bot:
                    await client.telegram_bot.send_message(
                        chat_id=client.telegram_chat_id,
                        text=error_msg
                    )
            
            await asyncio.sleep(client.get_timeout())
    except asyncio.CancelledError:
        print("   –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        raise


def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)"""
    global client, monitoring_task
    
    print("\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç...")
    
    if client:
        client.stop_control_loop()
    
    if monitoring_task and not monitoring_task.done():
        monitoring_task.cancel()
    
    print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(0)


def main():
    global client
    
    if not BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        print("\n–î–æ–±–∞–≤—å—Ç–µ –≤ .env:")
        print("TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_BotFather")
        print("TELEGRAM_USER_ID=–≤–∞—à_telegram_id")
        return
    
    if not ALLOWED_USER_ID:
        print("‚ùå TELEGRAM_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ Ctrl+C
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {ALLOWED_USER_ID}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–∑–∞–π–º–µ—Ç –≤—Ä–µ–º—è –æ–¥–∏–Ω —Ä–∞–∑)
    print("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Hyperliquid –∫–ª–∏–µ–Ω—Ç–∞...")
    try:
        client = HyperliquidClient()
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç: {e}")
        print("   –ö–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
        client = None
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("set_deviation", set_deviation_command))
    application.add_handler(CommandHandler("set_timeout", set_timeout_command))
    application.add_handler(CommandHandler("start_monitoring", start_monitoring_command))
    application.add_handler(CommandHandler("stop_monitoring", stop_monitoring_command))
    application.add_handler(CommandHandler("status", status_command))
    
    print("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
    
    try:
        application.run_polling()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        if client:
            client.stop_control_loop()
        print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()

